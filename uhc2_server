#!/usr/bin/perl -w

use strict;
use warnings;
use RPC::XML::Server;
use RPC::XML;
use DBI;
use modules;

# Konfigurationsdatei einlesen
my $cfg = Config::IniFiles->new( -file => "/opt/uhc2/config.ini" );

# Verbindung zu MySQL Datenbank herstellen
my $database = $cfg->val( 'db', 'database' );
my $host = $cfg->val( 'db', 'host' );
my $port = $cfg->val( 'db', 'port' );
my $user = $cfg->val( 'db', 'user' );
my $pw = $cfg->val( 'db', 'pw' );
my $dsn = "dbi:mysql:$database:$host:$port";
my $dbh = DBI->connect($dsn,$user,$pw);{ RaiseError => 1} or die $dbh->errstr();

# XML RPC Server erstellen
my $server = RPC::XML::Server->new(port=>5544);

# Methoden hinzufügen
$server->add_method({name=>"event",signature=>["string string string string int","string string string string double","string string string string boolean","string string string string i4"],code=>\&eventCB});
$server->add_method({name=>"newDevices",signature=>["array string array"],code=>\&newDevicesCB});
$server->add_method({name=>"listDevices",signature=>["array string"],code=>sub {return RPC::XML::string->new()} });
$server->add_method({name=>"newDevice",signature=>["array string array"],code=>\&newDeviceCB });

# Funktionen
sub eventCB($$$$$) {
        my ($server, $interface, $address, $dp, $value) = @_;
        #print "$interface, $address, $dp, $value\n";

        # Timestamp erzeugen
        my $timestamp = timestamp();

        # Werte in HistoryStates suchen
        my $history = $dbh->prepare("SELECT * FROM `HistoryStates` WHERE `Address` = '$address' AND `Datapoint` = '$dp' AND `LastUpdate` > NOW() - INTERVAL 1 MINUTE");
        $history->execute();
        my $historystate = $history->fetchrow_hashref();

        # Werte loggen in HistoryStates
        if (!$historystate) {
        $dbh->do("INSERT INTO `$database`.`HistoryStates` (Interface,Address,DataPoint,Value,LastUpdate ) 
                  VALUES ('$interface','$address','$dp','$value','$timestamp')");
        }

        # Werte in CurrentStates suchen
        my $current = $dbh->prepare("SELECT * FROM `CurrentStates` WHERE `Address` = '$address' AND `Datapoint` = '$dp'");
        $current->execute();
        my $currentstate = $current->fetchrow_hashref();
        
        # Werte loggen in CurrentStates
        if ($currentstate) {
        my $update = $dbh->prepare("UPDATE `CurrentStates` SET `Value` = '$value', `LastUpdate`= '$timestamp' WHERE `Address` = '$address' AND `Datapoint` = '$dp'");
        $update->execute();
        } else {
        $dbh->do("INSERT INTO `$database`.`CurrentStates` (Interface,Address,DataPoint,Value,LastUpdate ) 
                  VALUES ('$interface','$address','$dp','$value','$timestamp')");
        }

        # Wärmebedarf
       if ($dp eq "VALVE_STATE") {
       waermebedarf();
       }

        return RPC::XML::string->new(); }

sub newDevicesCB($$$) {
        my ($server, $id, $a) = @_;
        for my $dev (@$a){
        my $addr=$dev->{ADDRESS};
        print "Session: $id, Gerät: $addr\n";
        }
        return RPC::XML::string->new(); }

sub newDeviceCB {
        my ($server, $id,$a) = @_;
        print $server,$id,$a;
        return RPC::XML::string->new(); }

# Server starten
$server->server_loop();                                                                                                                                                                                                  85,1         Ende
